FROM ubuntu:16.04

# persistent / runtime deps
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev \
		file \
		g++ \
		gcc \
		libc-dev \
		libpcre3-dev \
		make \
		pkg-config \
		re2c
RUN apt-get update && apt-get install -y \
		$PHPIZE_DEPS \
		ca-certificates \
		curl \
		libedit2 \
		libsqlite3-0 \
		libxml2 \
		xz-utils \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 0B96609E270F565C13292B24C13C70B87267B52D

ENV PHP_VERSION php-5.6.34
ENV PHP_URL="http://php.net/get/php-5.6.34.tar.gz/from/this/mirror" PHP_ASC_URL=""
ENV PHP_SHA256="" PHP_MD5=""

RUN set -xe; \
	\
	fetchDeps=' \
		wget \
	'; \
	if ! command -v gpg > /dev/null; then \
		fetchDeps="$fetchDeps \
			dirmngr \
			gnupg2 \
		"; \
	fi; \
	apt-get update; \
	apt-get install -y --no-install-recommends $fetchDeps; \
	rm -rf /var/lib/apt/lists/*; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.gz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	\
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps

COPY docker-php-source /usr/local/bin/

RUN set -xe \
	&& buildDeps=" \
		$PHP_EXTRA_BUILD_DEPS \
		libcurl4-openssl-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		sudo \
		libcurl4-openssl-dev \
		curl \
		python-pip \
		apt-transport-https	\
		apt-utils \
		libmcrypt-dev \
		zip \
		unzip \
		postgresql-server-dev-all \
		libfreetype6-dev \
		tzdata \
		libturbojpeg \
		libpng12-dev \
		supervisor \
		cron \
		locales \
		libjpeg-turbo8-dev \
		php-pear \
		lsof \
	" \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--enable-soap \
		--enable-zip \
		--with-zlib \
		--enable-maintainer-zts\
		\
# bundled pcre is too old for s390x (which isn't exactly a good sign)
# /usr/src/php/ext/pcre/pcrelib/pcre_jit_compile.c:65:2: error: #error Unsupported architecture
		--with-pcre-regex=/usr \
		--with-libdir="lib/$gnuArch" \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& docker-php-source delete

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'include=etc/php-fpm.d/*.conf'; \
	} | tee php-fpm.conf \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf

EXPOSE 9000

RUN echo "Europe/Moscow" > /etc/timezone && \
	dpkg-reconfigure -f noninteractive tzdata && \
	sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
	sed -i -e 's/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/' /etc/locale.gen && \
	echo 'LANG="ru_RU.UTF-8"'>/etc/default/locale && \
	dpkg-reconfigure --frontend=noninteractive locales && \
	update-locale LANG=ru_RU.UTF-8 && \
	docker-php-ext-install curl iconv mcrypt calendar mysqli && \
	docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ && \
	docker-php-ext-install mbstring pdo_mysql tokenizer pdo_pgsql gd exif bcmath opcache sockets &&\
	pecl install timezonedb && \
	pecl install pthreads-2.0.10

COPY .crontab /etc/cron.d/cron
COPY schedule.sh /root/schedule.sh
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN chmod 644 /etc/cron.d/cron && chmod 744 /root/schedule.sh && usermod  -u 1000 www-data && groupmod -g 1000 www-data

RUN apt-get update && apt-get install -y wget memcached && wget http://pecl.php.net/get/memcache-2.2.7.tgz && tar -zxvf memcache-2.2.7.tgz && \
	cd memcache-2.2.7 && phpize && ./configure && make && make install &&\
	echo "extension=memcache.so" > $PHP_INI_DIR/conf.d/memcache.ini && cd .. && rm -R memcache-2.2.7
	
COPY www.conf /usr/local/etc/php-fpm.d/

RUN echo "memory_limit=-1" > $PHP_INI_DIR/conf.d/memory-limit.ini && \
	echo "extension=timezonedb.so" > $PHP_INI_DIR/conf.d/timezonedb.ini && \
	echo "extension=pthreads.so" > $PHP_INI_DIR/conf.d/pthreads.ini && \
	echo "date.timezone=europe/moscow" > $PHP_INI_DIR/conf.d/date.timezone.ini && \
	echo "mbstring.func_overload=2" > $PHP_INI_DIR/conf.d/mbstring.func_overload.ini && \
	echo "mbstring.internal_encoding=UTF-8" > $PHP_INI_DIR/conf.d/mbstring.internal_encoding.ini && \
	echo "opcache.revalidate_freq=0" > $PHP_INI_DIR/conf.d/opcache.revalidate_freq.ini && \
	echo "opcache.max_accelerated_files=100000" > $PHP_INI_DIR/conf.d/opcache.max_accelerated_files.ini && \
	echo "max_input_vars=100000" > $PHP_INI_DIR/conf.d/max_input_vars.ini && \
	echo "upload_max_filesize=500M" > $PHP_INI_DIR/conf.d/upload_max_filesize.ini && \
	echo "error_log=/var/log/schedule.log\nlog_errors=On\nerror_reporting=E_ALL" > $PHP_INI_DIR/conf.d/error_log.ini

CMD ["/usr/bin/supervisord"]
